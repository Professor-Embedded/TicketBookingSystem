name: Validate PR Description Format

on:
  pull_request:
    types: [opened, edited, synchronize, reopened]

jobs:
  validate-pr-body:
    runs-on: ubuntu-latest

    steps:
      - name: Validate PR body line-by-line
        env:
          PR_BODY: ${{ github.event.pull_request.body }}
        run: |
          echo "$PR_BODY" > pr_description.txt

          python3 <<EOF
import re
with open("pr_description.txt") as f:
    lines = [line.rstrip() for line in f.readlines()]

if len(lines) != 12:
    raise SystemExit(f"❌ PR description must be exactly 12 lines. Found {len(lines)} lines.")

validators = [
    (r'^[a-zA-Z0-9._-]+ [0-9]+\.[0-9]+: Fix CVE-[0-9]{4}-[0-9]{4,}$', "Line 1 format: '<Package> <Version>: Fix CVE-XXXX-YYYY'"),
    (r'^$', "Line 2 must be blank"),
    (r'^Upstream Repository: https?://\S+$', "Line 3 format: 'Upstream Repository: <URL>'"),
    (r'^$', "Line 4 must be blank"),
    (r'^Bug Details: https?://\S+$', "Line 5 format: 'Bug Details: <URL>'"),
    (r'^Type: Security Fix$', "Line 6 must be 'Type: Security Fix'"),
    (r'^CVE: CVE-[0-9]{4}-[0-9]{4,}$', "Line 7 format: 'CVE: CVE-XXXX-YYYY'"),
    (r'^Score: [0-9]+(\.[0-9]+)?$', "Line 8 format: 'Score: <CVSS>'"),
    (r'^Patch: https?://\S+$', "Line 9 format: 'Patch: <URL>'"),
    (r'^$', "Line 10 must be blank"),
    (r'^Jira-Id: [A-Z]+-[0-9]+$', "Line 11 format: 'Jira-Id: PROJECT-ID'"),
    (r'^Signed-off-by: .+ <.+@.+>$', "Line 12 format: 'Signed-off-by: Name <email>'")
]

for i, (pattern, error) in enumerate(validators):
    if not re.match(pattern, lines[i]):
        raise SystemExit(f"❌ Line {i+1} invalid: {error}\n   → {lines[i]}")

print("✅ PR description passed validation.")
EOF
